package practica1.matricesdispersas;


import java.util.LinkedList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/** Interfaz del programa.
 *
 * @author JoseMAGG
 */
public class Menu extends javax.swing.JFrame {
    private static MatrizTripletas matrizEnA, matrizEnB;
    private static final DefaultListModel listModel = new DefaultListModel();
    private static final LinkedList<MatrizTripletas> matricesGuardadas = new LinkedList();
    private static boolean info = true;
    
    /**
     * Creates new form Menu
     */
    public Menu() {
        initComponents();
        nombreAutomatico();
        nombreCB.setSelected(false);
        nombreTxt.setEnabled(false);
        actualizarBotonesA();
        actualizarBotonesB();
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Menu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Menu().setVisible(true);
            }
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        filasTxt = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        columnasTxt = new javax.swing.JTextField();
        nombreTxt = new javax.swing.JTextField();
        crearBtn = new javax.swing.JButton();
        nombreCB = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        matricesList = new javax.swing.JList<>();
        mostrarABtn = new javax.swing.JButton();
        mostrarBBtn = new javax.swing.JButton();
        eliminarBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        matrizATbl = new javax.swing.JTable();
        jScrollPane4 = new javax.swing.JScrollPane();
        matrizBTbl = new javax.swing.JTable();
        jSeparator3 = new javax.swing.JSeparator();
        matrizALbl = new javax.swing.JLabel();
        matrizBLbl = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        sumarBtn = new javax.swing.JButton();
        inversaBBtn = new javax.swing.JButton();
        guardarABtn = new javax.swing.JButton();
        guardarBBtn = new javax.swing.JButton();
        modificarBBtn = new javax.swing.JButton();
        modificarABtn = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        inversaABtn = new javax.swing.JButton();
        detABtn = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        trasABtn = new javax.swing.JButton();
        cofABtn = new javax.swing.JButton();
        adjABtn = new javax.swing.JButton();
        detBBtn = new javax.swing.JButton();
        trasBBtn = new javax.swing.JButton();
        cofBBtn = new javax.swing.JButton();
        adjBBtn = new javax.swing.JButton();
        detALbl = new javax.swing.JLabel();
        detBLbl = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(970, 650));

        jScrollPane2.setPreferredSize(new java.awt.Dimension(970, 640));

        jPanel5.setMinimumSize(new java.awt.Dimension(900, 600));
        jPanel5.setPreferredSize(new java.awt.Dimension(900, 600));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Crear Matriz", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        jPanel1.setMinimumSize(new java.awt.Dimension(220, 0));
        jPanel1.setName("Crear"); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(220, 126));

        filasTxt.setMinimumSize(new java.awt.Dimension(80, 20));
        filasTxt.setName(""); // NOI18N
        filasTxt.setPreferredSize(new java.awt.Dimension(80, 25));
        filasTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                filasTxtKeyTyped(evt);
            }
        });

        jLabel1.setText("Número Filas:");
        jLabel1.setPreferredSize(new java.awt.Dimension(90, 25));

        jLabel2.setText("Número Columnas:");
        jLabel2.setPreferredSize(new java.awt.Dimension(90, 25));

        columnasTxt.setMinimumSize(new java.awt.Dimension(80, 20));
        columnasTxt.setPreferredSize(new java.awt.Dimension(80, 25));
        columnasTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                columnasTxtKeyTyped(evt);
            }
        });

        nombreTxt.setText("Matriz A");
        nombreTxt.setMinimumSize(new java.awt.Dimension(80, 20));
        nombreTxt.setPreferredSize(new java.awt.Dimension(80, 25));
        nombreTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                nombreTxtKeyTyped(evt);
            }
        });

        crearBtn.setText("Crear");
        crearBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearBtnActionPerformed(evt);
            }
        });

        nombreCB.setText("Nombre");
        nombreCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nombreCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 7, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(nombreCB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nombreTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(columnasTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(filasTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(crearBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(filasTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(columnasTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nombreTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nombreCB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(crearBtn)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Matrices Guardadas", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        jPanel2.setMaximumSize(new java.awt.Dimension(220, 250));
        jPanel2.setMinimumSize(new java.awt.Dimension(220, 250));
        jPanel2.setPreferredSize(new java.awt.Dimension(220, 174));

        matricesList.setToolTipText("");
        matricesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                matricesListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(matricesList);

        mostrarABtn.setText("Mostrar En A");
        mostrarABtn.setEnabled(false);
        mostrarABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarABtnActionPerformed(evt);
            }
        });

        mostrarBBtn.setText("Mostrar En B");
        mostrarBBtn.setEnabled(false);
        mostrarBBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mostrarBBtnActionPerformed(evt);
            }
        });

        eliminarBtn.setText("Eliminar");
        eliminarBtn.setEnabled(false);
        eliminarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eliminarBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(eliminarBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(mostrarBBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(mostrarABtn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 188, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mostrarABtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(mostrarBBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(eliminarBtn)
                .addContainerGap())
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operar Matrices", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        jPanel3.setMaximumSize(new java.awt.Dimension(500, 300));
        jPanel3.setMinimumSize(new java.awt.Dimension(500, 300));
        jPanel3.setPreferredSize(new java.awt.Dimension(0, 0));

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Matriz A", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        jScrollPane3.setAutoscrolls(true);
        jScrollPane3.setPreferredSize(new java.awt.Dimension(228, 240));

        matrizATbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        matrizATbl.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        matrizATbl.setEnabled(false);
        matrizATbl.setShowGrid(true);
        jScrollPane3.setViewportView(matrizATbl);
        matrizATbl.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Matriz B", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));
        jScrollPane4.setPreferredSize(new java.awt.Dimension(228, 240));

        matrizBTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        matrizBTbl.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        matrizBTbl.setEnabled(false);
        matrizBTbl.setShowGrid(true);
        jScrollPane4.setViewportView(matrizBTbl);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

        matrizALbl.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        matrizALbl.setText("Se muestra la matriz: ");

        matrizBLbl.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        matrizBLbl.setText("Se muestra la matriz:");

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operaciones", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.TOP));

        sumarBtn.setText("Sumar Matrices");
        sumarBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sumarBtnActionPerformed(evt);
            }
        });

        inversaBBtn.setText("Inversa de B");
        inversaBBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inversaBBtnActionPerformed(evt);
            }
        });

        guardarABtn.setText("Guardar A");
        guardarABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarABtnActionPerformed(evt);
            }
        });

        guardarBBtn.setText("Guardar B");
        guardarBBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarBBtnActionPerformed(evt);
            }
        });

        modificarBBtn.setText("Modificar B");
        modificarBBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarBBtnActionPerformed(evt);
            }
        });

        modificarABtn.setText("Modificar A");
        modificarABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarABtnActionPerformed(evt);
            }
        });

        jSeparator1.setToolTipText("");

        inversaABtn.setText("Inversa de A");
        inversaABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inversaABtnActionPerformed(evt);
            }
        });

        detABtn.setText("Determinante A");
        detABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detABtnActionPerformed(evt);
            }
        });

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setToolTipText("");

        trasABtn.setText("Traspuesta A");
        trasABtn.setPreferredSize(new java.awt.Dimension(120, 23));
        trasABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trasABtnActionPerformed(evt);
            }
        });

        cofABtn.setText("Cofactores A");
        cofABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cofABtnActionPerformed(evt);
            }
        });

        adjABtn.setText("Adjunta A");
        adjABtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjABtnActionPerformed(evt);
            }
        });

        detBBtn.setText("Determinante B");
        detBBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                detBBtnActionPerformed(evt);
            }
        });

        trasBBtn.setText("Traspuesta B");
        trasBBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                trasBBtnActionPerformed(evt);
            }
        });

        cofBBtn.setText("Cofactores B");
        cofBBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cofBBtnActionPerformed(evt);
            }
        });

        adjBBtn.setText("Adjunta B");
        adjBBtn.setToolTipText("");
        adjBBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjBBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sumarBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(detABtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cofABtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(trasABtn, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                                    .addComponent(adjABtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(modificarABtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(guardarABtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(24, 24, 24)
                                .addComponent(inversaABtn)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(modificarBBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(guardarBBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(inversaBBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(cofBBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(detBBtn, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(trasBBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(adjBBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(modificarBBtn)
                            .addComponent(guardarABtn)
                            .addComponent(modificarABtn)
                            .addComponent(guardarBBtn)
                            .addComponent(inversaABtn)
                            .addComponent(inversaBBtn))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(detABtn)
                                    .addComponent(trasABtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cofABtn)
                                    .addComponent(adjABtn)))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(detBBtn)
                                    .addComponent(trasBBtn))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(cofBBtn)
                                    .addComponent(adjBBtn)))))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sumarBtn)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        detALbl.setText("Determinante:");

        detBLbl.setText("Determinante:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(matrizALbl)
                            .addComponent(detALbl)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(matrizBLbl)
                            .addComponent(detBLbl)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(matrizBLbl)
                            .addComponent(matrizALbl))
                        .addGap(11, 11, 11)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(detALbl)
                            .addComponent(detBLbl)))
                    .addComponent(jSeparator3, javax.swing.GroupLayout.PREFERRED_SIZE, 355, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 690, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(38, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 588, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)))
                .addContainerGap(49, Short.MAX_VALUE))
        );

        jScrollPane2.setViewportView(jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Habilita los botones de operación de la Matriz A (En pantalla) si hay
     * una matriz mostrandose en este espacio, si no hay matriz mostrándose, se 
     * deshabilitan todos los botones
     * 
     */
    private void actualizarBotonesA(){
        modificarABtn.setEnabled(matrizEnA != null);
        guardarABtn.setEnabled(matrizEnA != null);
        inversaABtn.setEnabled(matrizEnA != null);
        detABtn.setEnabled(matrizEnA != null);
        trasABtn.setEnabled(matrizEnA != null);
        cofABtn.setEnabled(matrizEnA != null);
        adjABtn.setEnabled(matrizEnA != null);
        sumarBtn.setEnabled(matrizEnA != null && matrizEnB != null);
    }
    
    /** Habilita los botones de operación de la Matriz B (En pantalla) si hay
     * una matriz mostrandose en este espacio, si no hay matriz mostrándose, se 
     * deshabilitan todos los botones
     * 
     */
    private void actualizarBotonesB(){
        modificarBBtn.setEnabled(matrizEnB != null);
        guardarBBtn.setEnabled(matrizEnB != null);
        inversaBBtn.setEnabled(matrizEnB != null);
        detBBtn.setEnabled(matrizEnB != null);
        trasBBtn.setEnabled(matrizEnB != null);
        cofBBtn.setEnabled(matrizEnB != null);
        adjBBtn.setEnabled(matrizEnB != null);        
        sumarBtn.setEnabled(matrizEnA != null && matrizEnB != null);
    }
    
    /** Guarda una matriz ingresada como parámetro en la lista ligada de matrices
     * Muestra el nombre de la matriz en la JList en pantalla.
     * 
     * @param matriz 
     */
    private void agregarMatriz(MatrizTripletas matriz) {
        matricesList.setModel(listModel);
        listModel.addElement(matriz.getNombre());
        matricesGuardadas.add(matriz);
    }
    
    /** Deshabilita los botones de "Mostrar En A", "Mostrar En B", y "Eliminar"
     * en el espacio de "Matrices Guardadas" de la pantalla.
     * 
     */
    private void deshabilitarBotonesLista(){
        mostrarABtn.setEnabled(false);
        mostrarBBtn.setEnabled(false);
        eliminarBtn.setEnabled(false);
    }
    
    /** Guarda la información que se ha ingresado en la tabla, que se entrega como
     * primer parámetro, en la matriz ingresada como segundo parámetro.
     * 
     * @param tabla
     * @param matriz
     * @throws Exception 
     */
    public void guardarTablaEnMatriz(JTable tabla, MatrizTripletas matriz) throws Exception{
        DefaultTableModel model = (DefaultTableModel) tabla.getModel();
        for(int i=0; i<model.getRowCount(); i++){
            for(int j=1; j<model.getColumnCount(); j++){
                Object valor = model.getValueAt(i, j);
                if( valor != null ){
                    if(valor.toString().trim() != null && !valor.toString().trim().isEmpty()){
                        try{
                            double valConvertido = Double.valueOf(valor.toString()); 
                            if(valConvertido != 0) matriz.setCelda(i + 1, j, valConvertido);
                        }catch(NumberFormatException e){
                            JOptionPane.showMessageDialog(null, "Sólo puede ingresar números, "
                                    + "signos o puntos en las celdas de la matriz");
                            return;
                        }
                    }else model.setValueAt(null, i, j);
                }
            }
        }
        tabla.setEnabled(false);
    }
    
    /** Habilita la tabla ingresada como parámetro para que el usuario pueda
     * modificarla. Da un mensaje de instrucciones sólo la primera vez que se
     * habilita una tabla en el programa.
     * 
     * @param tabla 
     */
    private void modificarTabla(JTable tabla){
        if(info){
            JOptionPane.showMessageDialog(null, "Sólo puede ingresar números, "
                                    + "signos o puntos en las celdas de la matriz");
            info = false;
        }
        tabla.setEnabled(true);
    }
    
    /** Genera nombres automáticos para las matrices en orden alfabético desde
     * la A hasta la Z
     * 
     */
    private void nombreAutomatico() {
        String letras = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        int i = 0;
        if(!matricesGuardadas.isEmpty()){
            for(MatrizTripletas elemento: matricesGuardadas){
                for(i = 0; i < letras.length(); i++){
                    if(elemento.getNombre().charAt(7) == letras.charAt(i)){
                        i++;
                        break;
                    }
                }
            }
        }
        String nombre = "Matriz " + letras.charAt(i%26);
        nombreTxt.setText(nombre);
    }
    
    /** Valida que sólo se ingrese números en los campos de fila y columna en pantalla
     * 
     * @param e 
     */
    public void soloNumeros(java.awt.event.KeyEvent e){
      char caracter = e.getKeyChar();

      // Verificar si la tecla pulsada no es un digito
      if(((caracter < '0') ||
         (caracter > '9')) &&
         (caracter != '\b' /*corresponde a BACK_SPACE*/))
      {
         e.consume();  // ignorar el evento de teclado
      }
   }
    
    /** Define el número de filas y de columnas como 0 de la tabla ingresada 
     * como parámetro.
     * 
     * @param tabla 
     */
    private void vaciarTabla(JTable tabla){
        DefaultTableModel model = (DefaultTableModel) tabla.getModel();
        model.setRowCount(0);
        model.setColumnCount(0);
    }
    
    /** Valida si el nombre ingresado existe para otra matriz que esté guardada.
     * 
     * @param nombre
     * @return 
     */
    public boolean validarNombre(String nombre){
        if(!matricesGuardadas.isEmpty()){
            for(MatrizTripletas elemento: matricesGuardadas){
                if(elemento.getNombre().equals(nombre)) return false;
            }
        }
        return true;
    }

    /** Valida que sólo se ingrese números en el JTextField para el número de filas
     *  También que no se ingrese más de 10 caracteres.
     * @param e 
     */
    private void filasTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filasTxtKeyTyped
        soloNumeros(evt);
        if(filasTxt.getText().length() >= 10) {
            evt.consume();
        }
    }//GEN-LAST:event_filasTxtKeyTyped

    /** Crea una nueva matriz con el número de filas, número de columnas y nombre,
     * se guarda en la lista de matrices guardadas, se muestra en la lista en pantalla
     * y se muestra en la tabla de la "Matriz A" en pantalla.
     * 
     * @param evt 
     */
    private void crearBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearBtnActionPerformed
        String nombre = nombreTxt.getText().trim();
        if(nombre.isEmpty() || filasTxt.getText().isEmpty() || columnasTxt.getText().isEmpty()){
            JOptionPane.showMessageDialog(null, 
                "Debe ingresar el número de filas y de columnas que desea para la matriz "
                        + "y un nombre para identificarla. Si el check button de \"Nombre\""
                        + " está desmarcado se generará automáticamente.");
            if(!nombreCB.isSelected()) nombreAutomatico();
        }
        else{
            if(!validarNombre(nombre)) JOptionPane.showMessageDialog(null, 
                    "Ya existe una matriz con el nombre ingresado. Por favor cámbielo");
            else{
                int filas = Integer.parseInt(filasTxt.getText());
                int columnas = Integer.parseInt(columnasTxt.getText());
                MatrizTripletas nuevaMatriz = new MatrizTripletas(filas, columnas, nombre);
                matrizEnA = nuevaMatriz;
                actualizarBotonesA();
                matrizALbl.setText("Se muestra la matriz: " + matrizEnA.getNombre());
                agregarMatriz(nuevaMatriz);                    
                nuevaMatriz.mostrarEnTabla(matrizATbl);
            }
            if(!nombreCB.isSelected()) nombreAutomatico();
        }
    }//GEN-LAST:event_crearBtnActionPerformed

    /** Valida que no se ingrese más de 20 caracteres en el JTextField para el nombre
     * 
     * @param e 
     */
    private void nombreTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nombreTxtKeyTyped
        if(nombreTxt.getText().length() >= 20) {
            evt.consume();
        }
    }//GEN-LAST:event_nombreTxtKeyTyped

    /** Valida que sólo se ingrese números en el JTextField para el número de columnas
     * También que no se ingrese más de 10 caracteres.
     * @param e 
     */
    private void columnasTxtKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_columnasTxtKeyTyped
        // TODO add your handling code here:
        soloNumeros(evt);
        if(columnasTxt.getText().length() >= 10) {
            evt.consume();
        }
    }//GEN-LAST:event_columnasTxtKeyTyped

    /** Activa los botones de "Matrices Guardadas" sólo si hay un elemento de la
     * lista en pantalla seleccionado, de lo contrario, los desactiva.
     * 
     * @param evt 
     */
    private void matricesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_matricesListMouseClicked
        mostrarABtn.setEnabled(matricesList.getSelectedIndex() != -1);
        mostrarBBtn.setEnabled(matricesList.getSelectedIndex() != -1);
        eliminarBtn.setEnabled(matricesList.getSelectedIndex() != -1);
    }//GEN-LAST:event_matricesListMouseClicked

    /** Muestra en la tabla de "Matriz A" la matriz que esté seleccionada en la 
     * lista en pantalla
     * 
     * @param evt 
     */
    private void mostrarABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarABtnActionPerformed
        // TODO add your handling code here:
        int i = matricesList.getSelectedIndex();
        if(i == -1) JOptionPane.showMessageDialog(null, "No hay ninguna matriz seleccionada");
        else{
            MatrizTripletas matrizSeleccionada = matricesGuardadas.get(i);
            matrizSeleccionada.mostrarEnTabla(matrizATbl);
            matrizEnA = matrizSeleccionada;
            matrizALbl.setText("Se muestra la matriz: " + matrizEnA.getNombre());
            deshabilitarBotonesLista();
            actualizarBotonesA();
        }
        
    }//GEN-LAST:event_mostrarABtnActionPerformed

    /** Habilita el JTextField de "Nombre" si su check box está habilitado, 
     * de lo contrario lo deshabilita
     * 
     * @param evt 
     */
    private void nombreCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nombreCBActionPerformed
        // TODO add your handling code here:
        if(nombreCB.isSelected()) nombreTxt.setEnabled(true);
        else {
            nombreTxt.setEnabled(false);
        }
    }//GEN-LAST:event_nombreCBActionPerformed

    /** Muestra en la tabla de "Matriz B" la matriz que esté seleccionada en la 
     * lista en pantalla
     * 
     * @param evt 
     */
    private void mostrarBBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mostrarBBtnActionPerformed
        int i = matricesList.getSelectedIndex();
        if(i == -1) JOptionPane.showMessageDialog(null, "No hay ninguna matriz seleccionada");
        else{
            MatrizTripletas matrizSeleccionada = matricesGuardadas.get(i);
            matrizSeleccionada.mostrarEnTabla(matrizBTbl);
            matrizEnB = matrizSeleccionada;
            matrizBLbl.setText("Se muestra la matriz: " + matrizEnB.getNombre());
            deshabilitarBotonesLista();
            actualizarBotonesB();
        }
    }//GEN-LAST:event_mostrarBBtnActionPerformed

    /** Elimina la matriz seleccionada en la lista de la lista ligada de 
     * matrices guardadas, borra el nombre de la matriz de la lista.
     * Si la matriz a eliminar está siendo mostrada en alguna tabla, se elimina
     * de la tabla también.
     * 
     * @param evt 
     */
    private void eliminarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eliminarBtnActionPerformed
        int i = matricesList.getSelectedIndex();
        if(i == -1) JOptionPane.showMessageDialog(null, "No hay ninguna matriz seleccionada");
        else{
            if(matrizEnA == matricesGuardadas.get(i)){
                vaciarTabla(matrizATbl);
                matrizEnA = null;
                matrizALbl.setText("Se muestra la matriz:");
                detALbl.setText("Determinante:");
                actualizarBotonesA();
            }
            if(matrizEnB == matricesGuardadas.get(i)) {
                vaciarTabla(matrizBTbl);
                matrizEnB = null;
                matrizBLbl.setText("Se muestra la matriz:");
                detBLbl.setText("Determinante:");
                actualizarBotonesB();
            }            
            matricesGuardadas.remove(i);
            listModel.removeElementAt(i);
            System.out.println(matricesGuardadas.toString());
            deshabilitarBotonesLista();
        }
    }//GEN-LAST:event_eliminarBtnActionPerformed

    private void modificarABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarABtnActionPerformed
        modificarTabla(matrizATbl);
    }//GEN-LAST:event_modificarABtnActionPerformed

    private void modificarBBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarBBtnActionPerformed
        modificarTabla(matrizBTbl);
    }//GEN-LAST:event_modificarBBtnActionPerformed

    /** Guarda las modificaciones de la tabla de la "Matriz B" en la matriz 
     * que se está mostrando en ella.
     * 
     * @param evt 
     */
    private void guardarBBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarBBtnActionPerformed
        // TODO add your handling code here:
        try {
            // TODO add your handling code here:
            guardarTablaEnMatriz(matrizBTbl, matrizEnB);
            System.out.println(matrizEnB);
        } catch (Exception ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_guardarBBtnActionPerformed

    /** Guarda las modificaciones de la tabla de la "Matriz A" en la matriz 
     * que se está mostrando en ella.
     * 
     * @param evt 
     */
    private void guardarABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarABtnActionPerformed
        try {
            // TODO add your handling code here:
            guardarTablaEnMatriz(matrizATbl, matrizEnA);
            System.out.println(matrizEnA);
        } catch (Exception ex) {
            Logger.getLogger(Menu.class.getName()).log(Level.SEVERE, null, ex.getMessage());
        }
    }//GEN-LAST:event_guardarABtnActionPerformed

    /** Suma las dos matrices que se estén mostrando en "Matriz A" y "Matriz B"
     * y se muestra la matriz resultado en la tabla de "Matriz A".
     * 
     * @param evt 
     */
    private void sumarBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sumarBtnActionPerformed
        if(matrizEnA == null || matrizEnB == null) JOptionPane.showMessageDialog(null,
            "Debe haber una matriz en A y otra matriz en B para poder realizar la suma");
        else{
            try {
                MatrizTripletas matrizSuma = matrizEnA.sumarMatriz(matrizEnB);
                agregarMatriz(matrizSuma);
                matrizSuma.mostrarEnTabla(matrizATbl);
                matrizEnA = matrizSuma;
                matrizALbl.setText("Se muestra la matriz: " + matrizEnA.getNombre());
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, ex.getMessage());
            }

        }
    }//GEN-LAST:event_sumarBtnActionPerformed

    /** Calcula la matriz adjunta de la matriz que se está mostrando en "Matriz A", 
     * se guarda en lista y se muestra en "Matriz A".
     * 
     * @param evt 
     */
    private void adjABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjABtnActionPerformed
        try {
            MatrizTripletas matrizAdj = matrizEnA.adjunta();
            agregarMatriz(matrizAdj);
            matrizAdj.mostrarEnTabla(matrizATbl);
            matrizALbl.setText("Se muestra la matriz: " + matrizAdj.getNombre());
            matrizEnA = matrizAdj;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "La matriz debe ser cuadrada "
                    + "para calcular su adjunta");
        }
    }//GEN-LAST:event_adjABtnActionPerformed

    /** Calcula el determinante de la matriz que se está mostrando en "Matriz A" 
     * y se muestra debajo de la tabla
     * 
     * @param evt 
     */
    private void detABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detABtnActionPerformed
        try {
            double det = matrizEnA.determinante();
            detALbl.setText("Determinante: " + det);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_detABtnActionPerformed

    /** Calcula el determinante de la matriz que se está mostrando en "Matriz B" 
     * y se muestra debajo de la tabla
     * 
     * @param evt 
     */
    private void detBBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_detBBtnActionPerformed
        try {
            double det = matrizEnB.determinante();
            detBLbl.setText("Determinante: " + det);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_detBBtnActionPerformed

    /** Calcula la traspuesta de la matriz que se está mostrando en "Matriz A", 
     * se guarda en lista y se muestra en "Matriz A".
     * 
     * @param evt 
     */
    private void trasABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trasABtnActionPerformed
        try {
            MatrizTripletas matrizTras = matrizEnA.traspuesta();
            agregarMatriz(matrizTras);
            matrizTras.mostrarEnTabla(matrizATbl);
            matrizALbl.setText("Se muestra la matriz: " + matrizTras.getNombre());
            matrizEnA = matrizTras;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_trasABtnActionPerformed

    /** Calcula la traspuesta de la matriz que se está mostrando en "Matriz B", 
     * se guarda en lista y se muestra en "Matriz B".
     * 
     * @param evt 
     */
    private void trasBBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_trasBBtnActionPerformed
        try {
            MatrizTripletas matrizTras = matrizEnB.traspuesta();
            agregarMatriz(matrizTras);
            matrizTras.mostrarEnTabla(matrizBTbl);
            matrizBLbl.setText("Se muestra la matriz: " + matrizTras.getNombre());
            matrizEnB = matrizTras;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_trasBBtnActionPerformed

    /** Calcula la matriz de cofactores de la matriz que se está mostrando en "Matriz A", 
     * se guarda en lista y se muestra en "Matriz A".
     * 
     * @param evt 
     */
    private void cofABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cofABtnActionPerformed
        try {
            MatrizTripletas matrizCof = matrizEnA.cofactores();
            agregarMatriz(matrizCof);
            matrizCof.mostrarEnTabla(matrizATbl);
            matrizALbl.setText("Se muestra la matriz: " + matrizCof.getNombre());
            matrizEnA = matrizCof;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "La matriz debe ser cuadrada "
                    + "para calcular su matriz de cofactores");
        }
    }//GEN-LAST:event_cofABtnActionPerformed

    /** Calcula la matriz de cofactores de la matriz que se está mostrando en "Matriz B", 
     * se guarda en lista y se muestra en "Matriz B".
     * 
     * @param evt 
     */
    private void cofBBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cofBBtnActionPerformed
        try {
            MatrizTripletas matrizCof = matrizEnB.cofactores();
            agregarMatriz(matrizCof);
            matrizCof.mostrarEnTabla(matrizBTbl);
            matrizBLbl.setText("Se muestra la matriz: " + matrizCof.getNombre());
            matrizEnB = matrizCof;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "La matriz debe ser cuadrada "
                    + "para calcular su matriz de cofactores");
        }
    }//GEN-LAST:event_cofBBtnActionPerformed

    /** Calcula la matriz adjunta de la matriz que se está mostrando en "Matriz B", 
     * se guarda en lista y se muestra en "Matriz B".
     * 
     * @param evt 
     */
    private void adjBBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjBBtnActionPerformed
        try {
            MatrizTripletas matrizAdj = matrizEnB.adjunta();
            agregarMatriz(matrizAdj);
            matrizAdj.mostrarEnTabla(matrizBTbl);
            matrizBLbl.setText("Se muestra la matriz: " + matrizAdj.getNombre());
            matrizEnB = matrizAdj;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "La matriz debe ser cuadrada "
                    + "para calcular su adjunta");
        }
    }//GEN-LAST:event_adjBBtnActionPerformed

    /** Calcula la inversa de la matriz que se esté mostrando en "Matriz A", la guarda
     * en la lista.
     * 
     * @param evt 
     */
    private void inversaABtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inversaABtnActionPerformed
        try {
            MatrizTripletas inversa = matrizEnA.inversa();
            agregarMatriz(inversa);
            inversa.mostrarEnTabla(matrizATbl);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_inversaABtnActionPerformed

    /** Calcula la inversa de la matriz que se esté mostrando en "Matriz B", la guarda
     * en la lista.
     * 
     * @param evt 
     */
    private void inversaBBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inversaBBtnActionPerformed
        try {
            MatrizTripletas inversa = matrizEnB.inversa();
            agregarMatriz(inversa);
            inversa.mostrarEnTabla(matrizBTbl);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage());
        }
    }//GEN-LAST:event_inversaBBtnActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton adjABtn;
    private javax.swing.JButton adjBBtn;
    private javax.swing.JButton cofABtn;
    private javax.swing.JButton cofBBtn;
    private javax.swing.JTextField columnasTxt;
    private javax.swing.JButton crearBtn;
    private javax.swing.JButton detABtn;
    private javax.swing.JLabel detALbl;
    private javax.swing.JButton detBBtn;
    private javax.swing.JLabel detBLbl;
    private javax.swing.JButton eliminarBtn;
    private javax.swing.JTextField filasTxt;
    private javax.swing.JButton guardarABtn;
    private javax.swing.JButton guardarBBtn;
    private javax.swing.JButton inversaABtn;
    private javax.swing.JButton inversaBBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JList<String> matricesList;
    private javax.swing.JLabel matrizALbl;
    private javax.swing.JTable matrizATbl;
    private javax.swing.JLabel matrizBLbl;
    private javax.swing.JTable matrizBTbl;
    private javax.swing.JButton modificarABtn;
    private javax.swing.JButton modificarBBtn;
    private javax.swing.JButton mostrarABtn;
    private javax.swing.JButton mostrarBBtn;
    private javax.swing.JCheckBox nombreCB;
    private javax.swing.JTextField nombreTxt;
    private javax.swing.JButton sumarBtn;
    private javax.swing.JButton trasABtn;
    private javax.swing.JButton trasBBtn;
    // End of variables declaration//GEN-END:variables

    

    
}
